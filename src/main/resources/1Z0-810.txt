Duration: TBD
# Questions: TBD
Passing Score: TBD%
US exam cost: US$ 245

Topics:
- Describe Java inner classes and develop the code that uses Java inner classes (such as: nested class, static class, local class and anonymous classes)
- Define and write functional interfaces
- Describe a Lambda expression; refactor the code that use anonymous inner class to use Lambda expression; including type inference,target typing

Using Built in Lambda Types
- Describe the built in interfaces included in Java 8 â€“ java.uilt.function package
- Develop code that uses Function interface
- Develop code that uses Consumer interface
- Develop code that uses Supplier interface
- Develop code that uses UnaryOperator interface
- Develop code that uses Predicate interface
- Develop the code that use primitive and binary variations of base interfaces of java.util.function package
- Develop the code that use method reference; including refactor the code that use Lambda expression to use method references

Filtering Collections with Lambdas
- Develop the code that iterates a collection by using forEach; including method chaining
- Describe the Stream interface and pipelines
- Filter a collection using lambda expressions
- Identify lambda operations that are lazy

Collection Operations with Lambda
- Develop the code to extract data from an object using map
- Search for data using search methods including: findFirst, findAny, anyMatch, allMatch, noneMatch.
- Describe the unique characteristics of the Optional classes
- Perform calculations using methods: count, max, min, average, sum
- Sort a collection using lambda expressions
- Save results to a collection by using the collect method and Collector class; including methods such as averagingDouble,groupingBy,joining,partitioningBy

Parallel Streams
- Develop the code that use parallel streams
- Implement decomposition, reduction, in streams

Lambda Cookbook
- Develop the code that use Java SE 8 collection improvements: Colleciton.removeIf, List.replaceAll, Map.computeIfAbsent/Present, Map.forEach
- Read files using lambda improvements: Files.find, lines(), walk()
- Use merge, flatMap methods on a collection
- Describe other stream sources: Arrays.stream(), IntStream.range()

Method Enhancements
- Adding static methods to interfaces
- Define and use a default method of a interface; Describe the inheritance rules for a default method

Use Java SE 8 Date/Time API
- Create and manage date-based and time-based events; including combination of date and time into a single object using  LocalDate, LocalTime, LocalDateTime, Instant, Period, Duration
- Work with dates and times across time-zones and manage changes resulting from daylight savings
- Define and create timestamps, periods and durations; apply formatting to local and zoned dates and times

JavaScript on Java with Nashorn
- Develop Javascript code that creates and uses Java members such as Java objects, methods, JavaBeans, Arrays, Collections, Interfaces.
- Develop code that  Evaluates JavaScript in java, Passes Java object to Javascript, inovkes Javascript function and call methods on javascript objects.
