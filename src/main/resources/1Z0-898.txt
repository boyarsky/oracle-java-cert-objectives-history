Duration: 135 minutes
# Questions: 64
Passing Score: 61%
US exam cost: US$ 245

Topics:
- 

Missing package and import statements

: If sample code do not include package or import statements, and the question does not explicitly refer to these missing statements, then assume that all sample code is in the same package, or import statements exist to support them.
- 

No file or directory path names for classes

: If a question does not state the file names or directory locations of classes, then assume one of the following, whichever will enable the code to compile and run:
- All classes are in one file
- Each class is contained in a separate file, and all files are in one directory
- 

Unintended line breaks

: Sample code might have unintended line breaks. If you see a line of code that looks like it has wrapped, and this creates a situation where the wrapping is significant (for example, a quoted String literal has wrapped), assume that the wrapping is an extension of the same line, and the line does not contain a hard carriage return that would cause a compilation failure.
- 

Code fragments

: A code fragment is a small section of source code that is presented without its context. Assume that all necessary supporting code exists and that the supporting environment fully supports the correct compilation and execution of the code shown and its omitted environment.
- 

Descriptive comments

: Take descriptive comments, such as "setter and getters go here," at face value. Assume that correct code exists, compiles, and runs successfully to create the described effect.

TOPICS

Overview of the Java Persistence API
- Describe the basics of Object Relational Mapping (ORM)
- Define the key concepts of the Java Persistence API (entity, entity manager, and persistence unit)

Introducing the Auction Application
- Describe the auction application
- Define the domain objects of the auction application
- Describe the implementation model for the auction system

Java Persistence API Entities
- Describe the difference between objects and entities
- Describe the difference between persistent fields and properties
- Identify and use common Java Persistence API annotations, such as @Entity, @Id, @Table, and @Column

Understanding the Entity Manager
- Describe the relationship between an entity manager, a persistence context, and a persistence unit
- Describe the difference between a container-managed entity manager and an application-managed entity manager
- Describe the entity life cycle

Modeling Entity Relationships
- Examine association relationships in the data and object models
- Use relationship properties to define associations
- Implement one-to-one unidirectional associations
- Implement one-to-one bidirectional associations
- Implement many-to-one/one-to-many bidirectional associations
- Implement many-to-many bidirectional associations
- Implement many-to-many unidirectional associations
- Examine fetch and cascade mode settings

Entity Inheritance and Object-Relational Mapping
- Examine entity inheritance
- Examining object/relational inheritance hierarchy mapping strategies
- Inherit from an entity class
- Inherit using a mapped superclass
- Inherit from a non-entity class
- Examine inheritance mapping strategies
- Use an embeddable class

Persisting Enums and Collections
- Persist entities that contain enums with @Enumerated
- Persist entities that contain lists with @ElementCollection
- Persist entities that contain maps with @ElementCollection

Introduction to Querying
- Find an Entity by its primary key
- Understand basic Java Persistence API query language queries
- Understand native SQL queries
- Understand basic Criteria API queries

Using the Java Persistence API Query Language
- Examine the Java Persistence API query language
- Create and use the SELECT statement
- Create and use the UPDATE statement
- Create and use the DELETE statement

Using the Java Persistence API Criteria API
- Contrast queries that use the Criteria API with queries that use the Java Persistence query language
- Describe the metamodel object approach to querying
- Create Criteria API queries

Using the Java Persistence API in a Container
- Use the Java Persistence API from a servlet
- Use the Java Persistence API from a stateless session bean

Implementing Transactions and Locking
- Describe the transaction demarcation management
- Implement container-managed transactions (CMT)
- Interact programmatically with an ongoing CMT transaction
- Implement bean-managed transactions (BMT)
- Apply transactions to the Java Persistence API

Advanced Java Persistence API Concepts
- Specify composite primary keys
- Override mappings with the @AttributeOverride and @AssociationOverride annotations
- Understand entity listeners and callback methods
