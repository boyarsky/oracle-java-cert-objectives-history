Duration: 140 minutes
# Questions: 57
Passing Score: 64%
US exam cost: US$ 245

Topics:
- 

Missing package and import statements

: If sample code do not include package or import statements, and the question does not explicitly refer to these missing statements, then assume that all sample code is in the same package, or import statements exist to support them.
- 

No file or directory path names for classes

: If a question does not state the file names or directory locations of classes, then assume one of the following, whichever will enable the code to compile and run:
- All classes are in one file
- Each class is contained in a separate file, and all files are in one directory
- 

Unintended line breaks

: Sample code might have unintended line breaks. If you see a line of code that looks like it has wrapped, and this creates a situation where the wrapping is significant (for example, a quoted String literal has wrapped), assume that the wrapping is an extension of the same line, and the line does not contain a hard carriage return that would cause a compilation failure.
- 

Code fragments

: A code fragment is a small section of source code that is presented without its context. Assume that all necessary supporting code exists and that the supporting environment fully supports the correct compilation and execution of the code shown and its omitted environment.
- 

Descriptive comments

: Take descriptive comments, such as "setter and getters go here," at face value. Assume that correct code exists, compiles, and runs successfully to create the described effect.

TOPICS

Introduction to Java Servlets
- Describe web applications, CGI, and the role of Java
- Describe benefits of Java servlet technology
- Create a simple Java Servlet
- Define three-tier architecture
- Define Model-View-Controller (MVC) architecture

Introduction to Java Server Pages
- Describe why Servlets are not the whole solution
- Describe essentials of JSPs
- Understand the fundamentals and reasons for MVC architecture

Implementing an MVC Design
- Code a controller using a servlet
- Code a view using a JSP
- Forward control from a servlet to a JSP
- Understand fundamentals of EL
- Implement a simple MVC system

The servlet's environment
- Understand more details of the HTTP protocol
- Understand fundamentals of HTML forms
- Understand fundamentals of the HttpServlet and related APIs
- Write code that manages client sessions and cookies

Container facilities for servlets and JSPs
- Understand the purpose and structure of deployment descriptors
- Control context root and servlet mapping
- Create and use context and init parameters
- Use annotations to configure servlets

More view facilities
- Understand the four data scopes
- Understand and use EL dot and array access operators with Java Beans, arrays, and collections
- Understand and use EL implicit objects
- Create and use arithmetic expressions in EL
- Identify the need for iteration and selection in the view, and use JSTL tags to address those needs

Developing JSP pages
- Understand the origins, benefits, and weaknesses of JSPs
- Describe JSP technology, the conversion of JSPs to servlets, and the lifecycle of JSPs
- Understand JSP scripting elements, declarations and directives
- Use JSP implicit variables
- Understand and use jsp: tags

Developing JSP pages using custom tags
- Relate the JSTL to common job roles in web application development and understand the use of tags in JSP development
- Recognize correct syntax for tags
- Configure a JSP to use tags from the JSTL
- Write JSP code using several standard tags
- List capabilities of JSTL tags/span>

More Controller facilities
- Understand the servlet lifecycle
- Describe and use more advanced elements of the servlet APIs
- Create filters and use them in web applications

More options for the Model
- Understand the roles of JDBC and JPA
- Understand the many elements that make up the model
- Understand fundamentals of connecting to a database using JDBC or JPA

Asynchronous web applications
- Understand the interactions that are essential to asynchronous web pages
- Understand the role of AJAX-style client side programming
- Implement asynchronous servlets using the facilities of Java EE 6

Web application security
- Understand the role of the container in security
- Describe and implement four authentication models
- Force the use of encryption between a web application and the client browser
- Understand the role of JAAS in pluggable/extensible authentication for web applications
